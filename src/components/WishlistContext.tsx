import React, { useState, createContext, useContext } from 'react';
import { vercelStorageService } from '../services/VercelStorageService';
// Define the wishlist state type
type WishlistState = {
  currentQuestion: number;
  userName: string;
  mustHaveItems: string;
  niceToHaveItems: string;
  preposterousWishes: string;
  snackPreferences: string[];
  additionalComments: string;
};
// Define the context type
type WishlistContextType = {
  wishlistState: WishlistState;
  updateAnswer: (field: keyof WishlistState, value: string | string[]) => void;
  nextQuestion: () => void;
  submitForm: () => Promise<boolean>;
};
// Create context with default values
const WishlistContext = createContext<WishlistContextType>({
  wishlistState: {
    currentQuestion: 0,
    userName: '',
    mustHaveItems: '',
    niceToHaveItems: '',
    preposterousWishes: '',
    snackPreferences: [],
    additionalComments: ''
  },
  updateAnswer: () => {},
  nextQuestion: () => {},
  submitForm: async () => false
});
// Context provider component
export const WishlistProvider: React.FC<{
  children: React.ReactNode;
}> = ({
  children
}) => {
  const [wishlistState, setWishlistState] = useState<WishlistState>({
    currentQuestion: 0,
    userName: '',
    mustHaveItems: '',
    niceToHaveItems: '',
    preposterousWishes: '',
    snackPreferences: [],
    additionalComments: ''
  });
  // Update a specific field in the state
  const updateAnswer = (field: keyof WishlistState, value: string | string[]) => {
    setWishlistState(prev => ({
      ...prev,
      [field]: value
    }));
  };
  // Move to the next question
  const nextQuestion = () => {
    setWishlistState(prev => ({
      ...prev,
      currentQuestion: prev.currentQuestion + 1
    }));
  };
  // Submit the form and save to the server
  const submitForm = async (): Promise<boolean> => {
    try {
      // Create submission object (ID will be generated by the server)
      const submission = {
        userName: wishlistState.userName,
        mustHaveItems: wishlistState.mustHaveItems,
        niceToHaveItems: wishlistState.niceToHaveItems,
        preposterousWishes: wishlistState.preposterousWishes,
        snackPreferences: wishlistState.snackPreferences,
        additionalComments: wishlistState.additionalComments
      };
      
      // Save to Vercel KV
      const success = await vercelStorageService.saveSubmission(submission);
      if (success) {
        console.log('Form submitted successfully to Vercel KV:', submission);
      } else {
        console.error('Failed to submit form to Vercel KV');
      }
      return success;
    } catch (error) {
      console.error('Error submitting form:', error);
      return false;
    }
  };
  return <WishlistContext.Provider value={{
    wishlistState,
    updateAnswer,
    nextQuestion,
    submitForm
  }}>
      {children}
    </WishlistContext.Provider>;
};
// Custom hook to use the wishlist context
export const useWishlist = () => useContext(WishlistContext);